// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProjectMember { // relation table for many-to-many relationship between User and Project 
  id        String  @id @default(uuid())
  role      Role    @default(MEMBER)
  userId    String
  projectId String

  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // User can only be in a project once
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  role           Role      @default(MEMBER)
  authProvider   AuthProvider @default(CREDENTIALS)
  projects       Project[] @relation("ProjectMembers") // New many-to-many relation
  ownedProjects  Project[] @relation("ProjectOwner") // Owner relation
  assignedTasks  Task[]    @relation("UserTasks")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  projectMemberships ProjectMember[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id]) // Owner relation
  
  members     User[]   @relation("ProjectMembers") // New many-to-many relation
  
  tasks       Task[]
  boards      Board[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectMemberships ProjectMember[]
}

model Board {
  id          String   @id @default(uuid())
  projectId   String
  name        String
  description String?
  status      Status   @default(TODO)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id])
}

model Task {
  id            String   @id @default(uuid())
  projectId     String?
  assignedToId  String?
  title         String
  description   String?
  status        Status   @default(TODO)
  dueDate       DateTime?
  priority      Priority @default(MEDIUM)
  project       Project?  @relation(fields: [projectId], references: [id])
  assignedTo    User?    @relation("UserTasks", fields: [assignedToId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  boardId       String?
  
  board        Board?   @relation(fields: [boardId], references: [id])
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}


enum AuthProvider {
  CREDENTIALS  // Manual signup/login
  GOOGLE       // OAuth with Google
  GITHUB       // OAuth with GitHub
}